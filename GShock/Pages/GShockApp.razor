@namespace GShock.Pages
@page "/"
<div style="text-align: center;">
    <h1 style="font-family: 'Arial Rounded MT'; font-size:5rem; color: #548687;">GSHOCK</h1>
    <h2 class="output" style="font-size:20px">Mode: @watch.CurrentMode.Name</h2>
    <br />
    <h2 class="output">@output</h2>
    <br /><br /><br />
    <button class="button-cycle" @onclick=CycleMode>Cycle mode</button>
    <div>
        <ModeButtons Buttons=selectedModeButtons></ModeButtons>
    </div>
    <br />

</div>




@code {
    public List<IButton> selectedModeButtons;
    private Watch watch;
    private string output;
    private ModeButtonsFactory buttonsFactory;
    //private RenderFragment output;

    private ModeButtonsFactory BootstrapFactory()
    {
        return new ModeButtonsFactory(
            new Dictionary<Type, IModeButtonsStrategy>() 
            {
                { typeof(TimeMode), new SimpleModeButtonsStrategy() },
                { typeof(CounterMode), new SimpleModeButtonsStrategy() }
            }
        );
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        buttonsFactory = BootstrapFactory();
        watch = WatchFactory.Build();
        output = watch.ToString();
        watch.dataChanged += UpdateOutput;
        selectedModeButtons = buttonsFactory.GetButtons(watch.CurrentMode);

    }

    private void UpdateOutput()
    {
        output = watch.ToString();
        InvokeAsync(StateHasChanged);
    }

    private void CycleMode()
    {
        watch.CycleMode();
        selectedModeButtons = buttonsFactory.GetButtons(watch.CurrentMode);
    }
}
